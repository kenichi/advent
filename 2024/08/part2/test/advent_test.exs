defmodule AdventTest do
  use ExUnit.Case

  import Advent

  @test_input """
  ............
  ........0...
  .....0......
  .......0....
  ....0.......
  ......A.....
  ............
  ............
  ........A...
  .........A..
  ............
  ............
  """

  setup do: %{input: Advent.Input.parse(@test_input)}

  test "count_antinodes/1", %{input: input} do
    assert count_antinodes(input) == 34
  end

  @example """
  T....#....
  ...T......
  .T....#...
  .........#
  ..#.......
  ..........
  ...#......
  ..........
  ....#.....
  ..........
  """

  test "generate_antinodes/1" do
    expected =
      MapSet.new([
        {0, 0},
        {5, 0},
        {3, 1},
        {1, 2},
        {6, 2},
        {9, 3},
        {2, 4},
        {3, 6},
        {4, 8}
      ])

    observed =
      %Advent{map: %{T: [{0, 0}, {3, 1}, {1, 2}]}, maxx: 9, maxy: 9}
      |> generate_antinodes()
      |> Map.fetch!(:antinodes)

    MapSet.difference(expected, observed) |> dbg()
    MapSet.difference(observed, expected) |> dbg()
    assert MapSet.equal?(expected, observed)
  end
end
